array = [100, 34, 69, 45, 11, 18, 55, 84, 28, 92, 75];

array.size = (function(Array) {
    return objecttotalmembers(objectmemberindices(Array));
});

array.print = (function(Array) {
    keys = objectmemberindices(Array);
    for(i=0; i<Array..size(); i++){
        if(i!=0) print(", ");
        print(Array[keys[i]]); 
    }
    print(endl);
});

//------------------Merge Sort Algorithm-------------------


function partition(Table, TableA, TableB){
    keys = objectmemberindices(Table);
    middle = real2int(Table..size()/2);
    i=0;
    while(i<middle){
        TableA[i] = Table[keys[i]];
        i++;
    }
    i=0;
    while(i+middle<Table..size()){
        TableB[i] = Table[keys[i+middle]];
        i++;
    }
    return;
}

function merge(t_a, t_b){
    i=0; j=0; curr=0;
    result = [{"size": t_a.size}];
    while(i<t_a..size() and j<t_b..size()){
        if(t_a[i]<t_b[j]){
            result[curr] = t_a[i];
            i++;
        }
        else{
            result[curr] = t_b[j];
            j++;
        }
        curr++;
    }
    while(i<t_a..size()){
        result[curr++] = t_a[i++];
    }
    while(j<t_b..size()){
        result[curr++] = t_b[j++];
    }
    return result;
}

function merge_sort(Array){
    if(array.print != nil) p_f = Array.print;
    assert(typeof(Array)=="table");
    if(Array..size()<=1) 
        return Array;
    t_a = [{"size":Array.size}];
    t_b = [{"size":Array.size}];
    partition(Array, t_a, t_b);
    t_a = merge_sort(t_a);
    t_b = merge_sort(t_b);
    result = merge(t_a, t_b);
    result.print = p_f;
    return result;
}
//---------------------------------------------------------

print("Unsorted Array: ");
array..print();
print("Sorted Array: ");
result = merge_sort(array);
result..print();