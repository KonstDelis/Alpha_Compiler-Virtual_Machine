function printLine(){
    print("-------------------------------------------------------------------------------------------------------------", endl);
}

print("Testing objects", endl);
printLine();
print(endl);

names = ["Konstantinos", "Dimitris", "Christina", "Giwrgos", "Antonis", "Giannis", "Alkis"];
names.size = 7;

surnames = [
    {"Konstantinos":    "Delis"},
    {"Dimitris":        "Kleinaftakis"},
    {"Christina":       "Doka"},
    {"Giwrgos":         "Papadakis"},
    {"Antonis":         "Patedakis"},
    {"Giannis":         "Markoulakis"},
    {"Alkis":           "Soulos"},
    {"Dont print this": "Dont print this"}
];
surnames.size = 8;


//Print with name and surname tables
print("Printing names and surnames way 1 (name/surname tables)", endl);
printLine();

for(i=0; i<names.size and i<surnames.size; i++ ){
    print("Name: ", names[i], " | Surname: ", surnames[names[i]], endl);
}
printLine();


//Print by getting keys of surnames
keys_names = objectmemberkeys(surnames);

print("Printing names and surnames way 2 (objectmemberkeys())", endl);
printLine();

for(i=0; i<objecttotalmembers(keys_names); i++ ){
    if(keys_names[i] == "Dont print this" or keys_names[i] == "size") continue;
    print("Name: ", keys_names[i], " | Surname: ", surnames[keys_names[i]], endl);
}
printLine();

//Print using method call, kinda like using lambda expressions 
print("Printing names and surnames way 3 (using lambda expression-like syntax and method call)", endl);
printLine();

surnames.printAll = (function (this, before, middle, after) { //saw before, middle, after in Scala. Works like mkstring in scala streams/collections
    keys = objectmemberkeys(this);
    for(i=0; i<objecttotalmembers(keys); i++ ){
        if(keys[i] == "Dont print this" or keys[i] == "size" or keys[i] == "printAll" or keys[i]== "()") 
            continue;
        print(before , keys[i], middle,  this[keys[i]], after);
    }
});

surnames..printAll("Name: ", " | Surname: ", endl);
printLine();


//Print using method call, kinda like using lambda expressions 
print("Printing names and surnames way 4 (using lambda expression-like syntax and Normal call)", endl);
printLine();
surnames.printAll(surnames, "Name: ", " | Surname: ", endl);


printLine();
//Print using functor
print("Printing names and surnames way 5 (using functor)", endl);
printLine();
surnames["()"] = (function (this) {
    keys = objectmemberkeys(this);
    for(i=0; i<objecttotalmembers(keys); i++ ){
        if(keys[i] == "Dont print this" or keys[i] == "size" or keys[i] == "printAll" or keys[i]== "()") 
            continue;
        print("Name: " , keys[i], " | Surname: ",  this[keys[i]], endl);
    }
});
surnames();